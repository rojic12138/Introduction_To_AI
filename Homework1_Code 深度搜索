1:The missionaries and cannibals
描述
The missionaries and cannibals problem is usually stated as follows: 
Three missionaries and three cannibals are on one side of a river, along with a boat that can hold one or two people. 
Find a way to get everyone to the other side, 
without ever leaving a group of missionaries in one place (including the boat) outnumbered by the cannibals in that place. 
Now the problem has been extended to be more complicated. There are m missionaries and m cannibals who want to cross the river. 
And the boat is also enlarged to be capable of supporting n people. In order to make all of them cross the river safely what is the least number of steps? Notice that when the boat goes across the river there must be at least one missionary or cannibal on the boat.

输入
The input consists of only one line, and is made of two positive number m and n, where m ≤ 1000 and n ≤ 100.
输出
Output the least number of steps needed. If the problem can't be solved, print -1 as the result.
样例输入
3 2
样例输出
11

摘自网络：https://blog.csdn.net/jiange_zh/article/details/49313787
启发式搜索A* 能输出每一步走法 但是过不了poj
#include <iostream> 
#include <vector>
#include <cmath>

using namespace std;

int X, Y;
int k;

struct node
{
    int q[3];
};

vector<node> s;//存放已走过的路
int q[500][3];
//用于存放搜索结点，q[][0]是左岸传教士人数
//q[][1]是左岸野蛮人人数，q[][2]是左岸船的数目
int ans = 0;

int op_num = 0;
int go[500][2];
int fx[500][500];//

//安全状态：左岸中，传教士都在or都不在or传教士人数等于野人人数 
int is_safe(int state[3])
{
    if ((state[0] == 0 || state[0] == X || state[0] == state[1]) && (state[1] >= 0) && (state[1] <= Y))
    {
        return 1;
    }
    return 0;
}

//是否到达目标状态 
int is_success(int state[3])
{
    if (state[0] == 0 && state[1] == 0)
        return 1;
    return 0;
}

//该状态是否已经访问过 
int vis(int state[3])
{
    for (vector<node>::iterator it = s.begin(); it != s.end(); it++)
        if ((*it).q[0] == state[0] && (*it).q[1] == state[1] && (*it).q[2] == state[2])
            return 1;
    return 0;
}

int f1(int state[3])//左岸总人数
{
    return state[0] + state[1];
}

int f2(int state[3])//启发式函数A*
{
    return state[0] + state[1] - 2 * state[2];
}

int find_max(int cur)//op是啥？ 能做的事
{
    int max = -1;
    int op = -1;
    for (int j = 0; j < op_num; j++)//分别考虑可能的动作
    {
        if (fx[cur + 1][j] > max)
        {
            max = fx[cur + 1][j];
            op = j;
        }
    }
    if (max == -1)
        op = -1;
    return op;
}

//过河操作
int search(int cur)
{
    if (is_success(q[cur]))
    {
        ans = cur;
        return 1;
    }
    int state[3];
    int j;
    //cout<<"第"<<cur<<"层搜索"<<endl;
    //获取当前搜索结点
    //cout<<"展开结点"<<cur<<":"<<q[cur][0]<<' '<<q[cur][1]<<' '<<q[cur][2]<<endl;
    if (q[cur][2])//船在左边
    {
        for (j = 0; j < op_num; j++)//分别考虑可能的动作
        {
            state[0] = q[cur][0] - go[j][0];
            state[1] = q[cur][1] - go[j][1];
            state[2] = 0;//船到了右边
            fx[cur + 1][j] = f2(state);
        }
        j = find_max(cur);
        while (j != -1)
        {
            fx[cur + 1][j] = -1;
            state[0] = q[cur][0] - go[j][0];
            state[1] = q[cur][1] - go[j][1];
            state[2] = 0;//船到了右边
            if (is_safe(state) && !vis(state))//如果是安全状态//判断与之前展开结点是否相同
            {
                node nd;
                nd.q[0] = q[cur + 1][0] = state[0];
                nd.q[1] = q[cur + 1][1] = state[1];
                nd.q[2] = q[cur + 1][2] = state[2];
                s.push_back(nd);
                //cout<<"合法结点:"<<state[0]<<' '<<state[1]<<' '<<state[2]<<endl;       
                if (search(cur + 1))
                    return 1;
            }
            j = find_max(cur);
        }
    }
    else    //船在右边
    {
        for (j = 0; j < op_num; j++)//分别考虑可能的动作
        {
            state[0] = q[cur][0] + go[j][0];
            state[1] = q[cur][1] + go[j][1];
            state[2] = 1;
            fx[cur + 1][j] = f2(state);
        }
        j = find_max(cur);
        while (j != -1)
        {
            fx[cur + 1][j] = -1;
            state[0] = q[cur][0] + go[j][0];
            state[1] = q[cur][1] + go[j][1];
            state[2] = 1; //船回到左边
            if (is_safe(state) && !vis(state))//如果是安全状态且与之间状态不同
            {
                node nd;
                nd.q[0] = q[cur + 1][0] = state[0];
                nd.q[1] = q[cur + 1][1] = state[1];
                nd.q[2] = q[cur + 1][2] = state[2];
                s.push_back(nd);
                //cout<<"合法结点:"<<state[0]<<' '<<state[1]<<' '<<state[2]<<endl;
                if (search(cur + 1))
                    return 1;
            }
            j = find_max(cur);
        }
    }
    return 0;
}

int main()
{
    int n;
    cout << "请输入N：";
    cin >> n;
    cout << "请输入k：";
    cin >> k;
    X = Y = n;

    int state[3];
    //初始状态 
    node nd;
    nd.q[0] = state[0] = q[0][0] = X;
    nd.q[1] = state[1] = q[0][1] = Y;
    nd.q[2] = state[2] = q[0][2] = 1;

    s.push_back(nd);
    //初始化操作
    cout << "合法的操作组有：" << endl;
    for (int i = 1; i <= k; i++)
        for (int j = 0; j <= i; j++)
        {
            if (j >= i - j || j == 0)
            {
                go[op_num][0] = j;
                go[op_num][1] = i - j;
                cout << go[op_num][0] << ' ' << go[op_num][1] << endl;
                op_num++;
            }
        }
    cout << endl;
    if (!search(0))
    {
        cout << "无解" << endl;
        return 0;
    }
    cout << "找到的解为:" << endl;
    for (int i = 0; i <= ans; i++)
    {
        //cout<<q[i][0]<<' '<<q[i][1]<<' '<<q[i][2]<<endl;
        if (i > 0)
        {
            cout << abs(q[i][0] - q[i - 1][0]) << "个传教士和" << abs(q[i][1] - q[i - 1][1]) << "个野人";
            if (q[i][2])
                cout << "从右岸乘船至左岸" << endl;
            else
                cout << "从左岸乘船至右岸" << endl;
            cout << "左岸有" << q[i][0] << "个传教士和" << q[i][1] << "个野人" << endl;
            cout << "右岸有" << n - q[i][0] << "个传教士和" << n - q[i][1] << "个野人" << endl << endl;
        }
    }

    cout << "本次搜索所花费的费用：" << ans << endl;

    return 0;
}

/////////////////////////////
AC代码：(guyutongxue）
#include <iostream>
#include <queue>
using namespace std;

int m, n;
bool closed[3002][3002][2] = {};
struct Status {
    int leftMissionary;
    int leftCannibal;
    bool isBoatLeft;
    int step;
    Status(int m, int c, bool b = true, int s = 0)
        : leftMissionary(m), leftCannibal(c), isBoatLeft(b), step(s) {}
    bool canMove(int movingMissonary, int movingCannibal) {
        int& i = movingMissonary;
        int& j = movingCannibal;
        if ((i >= j || i == 0)) {
            if (isBoatLeft) {
                return ((leftMissionary - i >= 0) && (leftCannibal - j >= 0) &&
                    leftMissionary - i >= leftCannibal - j ||
                    leftMissionary - i == 0) &&
                    (m - leftMissionary + i >= m - leftCannibal + j ||
                        m - leftMissionary + i == 0) &&
                    !closed[leftMissionary - i][leftCannibal - j][!isBoatLeft];
            }
            else {
                return ((leftMissionary + i >= 0) && (leftCannibal + j >= 0) &&
                    leftMissionary + i >= leftCannibal + j ||
                    leftMissionary + i == 0) &&
                    (m - leftMissionary - i >= m - leftCannibal - j ||
                        m - leftMissionary - i == 0) &&
                    !closed[leftMissionary + i][leftCannibal + j][!isBoatLeft];
            }
        }
        else
            return false;
    }
    Status generate(int movingMissonary, int movingCannibal) {
        Status result = *this;
        if (isBoatLeft) {
            result.leftMissionary -= movingMissonary;
            result.leftCannibal -= movingCannibal;
        }
        else {
            result.leftMissionary += movingMissonary;
            result.leftCannibal += movingCannibal;
        }
        result.isBoatLeft ^= true;
        result.step++;
        closed[result.leftMissionary][result.leftCannibal][result.isBoatLeft] = true;
        return result;
    }
};

queue<Status> fringe;

int main() {
    cin >> m >> n;
    fringe.push(Status(m, m));
    closed[m][m][1] = true;
    while (!fringe.empty()) {
        Status node = fringe.front();
        fringe.pop();
        if (node.leftCannibal == 0 && node.leftMissionary == 0) {
            cout << node.step << endl;
            return 0;
        }
        if (node.isBoatLeft) {
            for (int i = n; i >= 1; i--) {
                for (int j = i; j >= 0; j--) {
                    if (node.canMove(i - j, j)) {
                        fringe.push(node.generate(i - j, j));
                    }
                }
            }
        }
        else {
            for (int i = 1; i <= n; i++) {
                for (int j = 0; j <= i; j++) {
                    if (i == j && j == 0)
                        continue;
                    if (node.canMove(i - j, j)) {
                        fringe.push(node.generate(i - j, j));
                    }
                }
            }
        }
    }
    cout << "-1" << endl;
}


2.Sudoku
总时间限制: 2000ms 内存限制: 65536kB
描述
Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares 3x3 as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked 3x3 subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task.

输入
The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0.
输出
For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them.
样例输入
1
103000509
002109400
000704000
300502006
060000050
700803004
000401000
009205800
804000107
样例输出
143628579
572139468
986754231
391542786
468917352
725863914
237481695
619275843
854396127

bfs 回溯 与八皇后基本没差别 
AC代码： 
#include<iostream>
#include<string.h>
#include<algorithm>
using namespace std;

int table[10][10];
bool row[10][10],col[10][10],square[10][10];
bool isdone;
void dfs(int m, int n)
{
	if (m == 10)
	{
		isdone = 1;
		for (int i = 1; i <= 9; i++)
		{
			for (int j = 1; j <= 9; j++)
				cout << table[i][j] ;
			cout << endl;
		}
		return;
	}
	if (isdone)
		return;
	if (table[m][n])
	{
		if (n == 9)
			dfs(m + 1, 1);
		else
			dfs(m, n + 1);
	}
	else
	{
		for (int num = 1; num <= 9; num++)
		{
			int k = ((m - 1) / 3) * 3 + (n - 1)/3;
			if (!row[m][num] && !col[n][num] && !square[k][num])
			{
				table[m][n] = num;
				row[m][num] = 1;
				col[n][num] = 1;
				square[k][num] = 1;
				if (n == 9)
					dfs(m + 1, 1);
				else
					dfs(m, n + 1);
				table[m][n] = 0;
				row[m][num] = 0;
				col[n][num] = 0;
				square[k][num] = 0;
			}
		}
	}
}
int main()
{
	int t;
	cin >> t;
	while (t--)
	{
		memset(square, 0, sizeof(square));
		memset(col, 0, sizeof(col));
		memset(row, 0, sizeof(row));
		for (int i = 1; i <= 9; i++)
		{
			string s; cin >> s;
			for (int j = 1; j <= 9; j++)
			{
				table[i][j] = s[j - 1] - '0';
				if (table[i][j])
				{
					int k = ((i - 1) / 3) * 3 + (j - 1)/3;
					row[i][table[i][j]] = col[j][table[i][j]] = square[k][table[i][j]] = 1;
				}
			}
		}
		isdone = 0;
		dfs(1, 1);
	}
	return 0;
}
