1:The missionaries and cannibals
描述
The missionaries and cannibals problem is usually stated as follows: 
Three missionaries and three cannibals are on one side of a river, along with a boat that can hold one or two people. 
Find a way to get everyone to the other side, 
without ever leaving a group of missionaries in one place (including the boat) outnumbered by the cannibals in that place. 
Now the problem has been extended to be more complicated. There are m missionaries and m cannibals who want to cross the river. 
And the boat is also enlarged to be capable of supporting n people. In order to make all of them cross the river safely what is the least number of steps? Notice that when the boat goes across the river there must be at least one missionary or cannibal on the boat.

输入
The input consists of only one line, and is made of two positive number m and n, where m ≤ 1000 and n ≤ 100.
输出
Output the least number of steps needed. If the problem can't be solved, print -1 as the result.
样例输入
3 2
样例输出
11


2.Sudoku
总时间限制: 2000ms 内存限制: 65536kB
描述
Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares 3x3 as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked 3x3 subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task.

输入
The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0.
输出
For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them.
样例输入
1
103000509
002109400
000704000
300502006
060000050
700803004
000401000
009205800
804000107
样例输出
143628579
572139468
986754231
391542786
468917352
725863914
237481695
619275843
854396127

bfs 回溯 与八皇后基本没差别 
AC代码： 
#include<iostream>
#include<string.h>
#include<algorithm>
using namespace std;

int table[10][10];
bool row[10][10],col[10][10],square[10][10];
bool isdone;
void dfs(int m, int n)
{
	if (m == 10)
	{
		isdone = 1;
		for (int i = 1; i <= 9; i++)
		{
			for (int j = 1; j <= 9; j++)
				cout << table[i][j] ;
			cout << endl;
		}
		return;
	}
	if (isdone)
		return;
	if (table[m][n])
	{
		if (n == 9)
			dfs(m + 1, 1);
		else
			dfs(m, n + 1);
	}
	else
	{
		for (int num = 1; num <= 9; num++)
		{
			int k = ((m - 1) / 3) * 3 + (n - 1)/3;
			if (!row[m][num] && !col[n][num] && !square[k][num])
			{
				table[m][n] = num;
				row[m][num] = 1;
				col[n][num] = 1;
				square[k][num] = 1;
				if (n == 9)
					dfs(m + 1, 1);
				else
					dfs(m, n + 1);
				table[m][n] = 0;
				row[m][num] = 0;
				col[n][num] = 0;
				square[k][num] = 0;
			}
		}
	}
}
int main()
{
	int t;
	cin >> t;
	while (t--)
	{
		memset(square, 0, sizeof(square));
		memset(col, 0, sizeof(col));
		memset(row, 0, sizeof(row));
		for (int i = 1; i <= 9; i++)
		{
			string s; cin >> s;
			for (int j = 1; j <= 9; j++)
			{
				table[i][j] = s[j - 1] - '0';
				if (table[i][j])
				{
					int k = ((i - 1) / 3) * 3 + (j - 1)/3;
					row[i][table[i][j]] = col[j][table[i][j]] = square[k][table[i][j]] = 1;
				}
			}
		}
		isdone = 0;
		dfs(1, 1);
	}
	return 0;
}
