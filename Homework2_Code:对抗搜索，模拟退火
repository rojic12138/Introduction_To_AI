alpha_beta剪枝的简单应用。
1:Find the Winning Move
查看提交统计提问
总时间限制: 3000ms 内存限制: 65536kB
描述
4x4 tic-tac-toe is played on a board with four rows (numbered 0 to 3 from top to bottom) and four columns (numbered 0 to 3 from left to right). There are two players, x and o, who move alternately with x always going first. The game is won by the first player to get four of his or her pieces on the same row, column, or diagonal. If the board is full and neither player has won then the game is a draw.
Assuming that it is x's turn to move, x is said to have a forced win if x can make a move such that no matter what moves o makes for the rest of the game, x can win. This does not necessarily mean that x will win on the very next move, although that is a possibility. It means that x has a winning strategy that will guarantee an eventual victory regardless of what o does.

Your job is to write a program that, given a partially-completed game with x to move next, will determine whether x has a forced win. You can assume that each player has made at least two moves, that the game has not already been won by either player, and that the board is not full.
输入
The input contains one or more test cases, followed by a line beginning with a dollar sign that signals the end of the file. Each test case begins with a line containing a question mark and is followed by four lines representing the board; formatting is exactly as shown in the example. The characters used in a board description are the period (representing an empty space), lowercase x, and lowercase o. For each test case, output a line containing the (row, column) position of the first forced win for x, or '#####' if there is no forced win. Format the output exactly as shown in the example.
输出
For this problem, the first forced win is determined by board position, not the number of moves required for victory. Search for a forced win by examining positions (0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), ..., (3, 2), (3, 3), in that order, and output the first forced win you find. In the second test case below, note that x could win immediately by playing at (0, 3) or (2, 0), but playing at (0, 1) will still ensure victory (although it unnecessarily delays it), and position (0, 1) comes first.
样例输入
?
....
.xo.
.ox.
....
?
o...
.ox.
.xxx
xooo
$
样例输出
#####
(0,1)
来源
Mid-Central USA 1999

#include<iostream>
#include<stdlib.h>
#include<math.h>
using namespace std;
char board[4][4];
int ansx, ansy;

//当前状态x赢返回1，o赢返回-1，否则返回0
int judge()
{
	int diag_a = 0, diag_b = 0;//主对角线
	int dediag_a = 0, dediag_b = 0;//副对角线
	for (int i = 0; i < 4; i++)
	{
		int ra, rb, ca, cb;
		ra = rb = ca = cb = 0;
		if (board[i][i] == 'x')
			diag_a++;
		else if (board[i][i] == 'o')
			diag_b++;
		if (board[i][3 - i] == 'x')
			dediag_a++;
		else if (board[i][3 - i] == 'o')
			dediag_b++;
		for (int j = 0; j < 4; j++)
		{
			if (board[i][j] == 'x')
				ra++;
			else if (board[i][j] == 'o')
				rb++;
			if (board[j][i] == 'x')
				ca++;
			else if (board[j][i] == 'o')
				cb++;
		}
		if (ra == 4 || ca == 4 || diag_a == 4 || dediag_a == 4)
			return 1;
		else if (rb == 4 || cb == 4 || diag_b == 4 || dediag_b == 4)
			return -1;
	}
	return 0;
}

int alpha_beta(int player, int alpha, int beta)
{
	int flag = judge();
	if (flag)//已经分出胜负
		return flag;
	if (player)//x走
	{
		for (int i = 0; i < 4; i++)
			for(int j=0;j<4;j++)
				if (board[i][j] == '.')
				{
					board[i][j] = 'x';
					int value = alpha_beta(player ^ 1, alpha, beta);
					board[i][j] = '.';
					if (value > alpha)
					{
						alpha = value;
						ansx = i;
						ansy = j;
					}
					if (alpha >= beta)
						return alpha;
				}
		return alpha;
	}
	else//y走
	{
		for(int i=0;i<4;i++)
			for(int j=0;j<4;j++)
				if (board[i][j] == '.')
				{
					board[i][j] = 'o';
					int value = alpha_beta(player ^ 1, alpha, beta);
					board[i][j] = '.';
					if (value < beta)
						beta = value;
					if (alpha >= beta)
						return beta;
				}
		return beta;
	}
}

int main()
{
	char sig;
	while (cin >> sig && sig != '$')
	{
		int count = 0;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
			{
				cin >> board[i][j];
				if (board[i][j] != '.')
					count++;
			}
		if (count <= 4)
		{
			cout << "#####" << endl;
			continue;
		}
		int alpha = -114514, beta = 114514;
		int ans = alpha_beta(1, alpha, beta);
		if (ans > 0)
			printf("(%d,%d)\n", ansx, ansy);
		else
			cout << "#####" << endl;
	}
	return 0;
}

2:A Star not a Tree?
查看提交统计提问
总时间限制: 1000ms 内存限制: 65536kB
描述
Luke wants to upgrade his home computer network from 10mbs to 100mbs. His existing network uses 10base2 (coaxial) cables that allow you to connect any number of computers together in a linear arrangement. Luke is particulary proud that he solved a nasty NP-complete problem in order to minimize the total cable length.
Unfortunately, Luke cannot use his existing cabling. The 100mbs system uses 100baseT (twisted pair) cables. Each 100baseT cable connects only two devices: either two network cards or a network card and a hub. (A hub is an electronic device that interconnects several cables.) Luke has a choice: He can buy 2N-2 network cards and connect his N computers together by inserting one or more cards into each computer and connecting them all together. Or he can buy N network cards and a hub and connect each of his N computers to the hub. The first approach would require that Luke configure his operating system to forward network traffic. However, with the installation of Winux 2007.2, Luke discovered that network forwarding no longer worked. He couldn't figure out how to re-enable forwarding, and he had never heard of Prim or Kruskal, so he settled on the second approach: N network cards and a hub.

Luke lives in a loft and so is prepared to run the cables and place the hub anywhere. But he won't move his computers. He wants to minimize the total length of cable he must buy.
输入
The first line of input contains a positive integer N <= 100, the number of computers. N lines follow; each gives the (x,y) coordinates (in mm.) of a computer within the room. All coordinates are integers between 0 and 10,000.
输出
Output consists of one number, the total length of the cable segments, rounded to the nearest mm.
样例输入
4
0 0
0 10000
10000 10000
10000 0
样例输出
28284
来源
Waterloo Local 2002.01.26
就是找费马点

#include<iostream>
#include<stdlib.h>
#include<math.h>
#include<ctime>
#define pi 3.1415926
#define MAXN 114
#define STEP 0.8
using namespace std;

int n;//几个点
struct node 
{
	double x, y;
}point[MAXN];

//启发函数：求距离
double dis(double x1, double y1, double x2, double y2)
{
	return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
double sum(double x, double y)
{
	double a = 0;
	for (int i = 0; i < n; i++)
		a += dis(x, y, point[i].x, point[i].y);
	return a;
}
//随机数
double ran()
{
	double x = rand() % 10000 + 1;
	return x / 10000.0 * 2.0 * pi;
}

int main()
{
	double minx=114514, maxx=-114514, miny=114514, maxy=-114514;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> point[i].x >> point[i].y;
	for (int i = 0; i < n; i++)
	{
		if (point[i].x < minx)
			minx = point[i].x;
		if (point[i].y < miny)
			miny = point[i].y;
		if (point[i].x > maxx)
			maxx = point[i].x;
		if (point[i].y > maxy)
			maxy = point[i].x;
	}
	//初始状态：从中点开始
	double ansx = (minx + maxx) / 2, ansy = (miny + maxy) / 2, val = sum(ansx, ansy);
	double t = 114514, tmp;
	while (t >= 1e-6)
	{
		double newx, newy;
		for(int i=0;i<20;i++)
			for (int j = 0; j < 20; j++)
			{
				double deg = ran();
				newx = ansx + t * cos(deg);
				newy = ansy + t * sin(deg);
				tmp = sum(newx, newy);
				if (tmp < val)
				{
					val = tmp;
					ansx = newx;
					ansy = newy;
				}
				else if(log10(t / 10000 * (rand() % 100) / 10.0 + 1) > 1)//注意这个判断，是抄的
				{
					val = tmp;
					ansx = newx;
					ansy = newy;
				}
			}
		t *= STEP;
	}
	printf("%.0f", val);
	return 0;
}
